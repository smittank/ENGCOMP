#include <stdio.h>
#include <math.h>
#include <string.h>

#define IDLENGTH 8
#define PI 3.14159
#define TOTAL_RECORDS 99

double dist(double lat1, double long1, double lat2, double long2); 
double toRadian(double angle);

int main(int argc, char* argv[]) {
	
	double long_dest, lat_dest, long_home, lat_home, distance, lat_list[TOTAL_RECORDS], long_list[TOTAL_RECORDS];
	int start_time, end_time, i, j, angle, close_contact_pairs, ST_list[TOTAL_RECORDS], ET_list[TOTAL_RECORDS], position = 0;
	char ID[IDLENGTH + 1], ID_list[TOTAL_RECORDS][IDLENGTH + 1];

	// Stage 1 ---------------

	scanf("%lf %lf %lf %lf %d %d %s", &lat_dest, &long_dest, &lat_home, &long_home, &start_time, &end_time, ID);
	
	printf("Stage 1\n");
	printf("==========\n");
	printf("User: %s\n", ID);
	printf("Visited location: <%f, %f>\n", lat_dest, long_dest);
	printf("Start time: %d\n", start_time);
	printf("End time: %d\n", end_time);

	distance = dist(lat_dest, long_dest, lat_home, long_home);
	printf("Distance from home: %05.2f km\n", distance);

	lat_list[position] = lat_dest;
	long_list[position] = long_dest;
	ST_list[position] = start_time;
	ET_list[position] = end_time;
	strcpy(ID_list[position], ID);


	scanf("\n");
	// End of stage 1 --------


	// Stage 2 ---------------
	printf("\nStage 2\n");
	printf("==========\n");


	printf("#%s, distance from home: %05.2f", ID, distance);
	for (i = 0; i < (distance); i++) {
		if (i % 5 == 0 && i != 0) {
			printf("+");
		}
		else {
			printf("-");
		}
	}
	printf("\n");

	while (scanf(" %lf ", &lat_dest) == 1) {
		scanf(" %lf %lf %lf %d %d %s", &long_dest, &lat_home, &long_home, &start_time, &end_time, ID);
		position = position + 1;
		
		distance = dist(lat_dest, long_dest, lat_home, long_home);

		lat_list[position] = lat_dest;
		long_list[position] = long_dest;
		ST_list[position] = start_time;
		ET_list[position] = end_time;
		strcpy(ID_list[position], ID);

		printf("#%s, distance from home: %05.2f", ID, distance);

		for (i = 1; i < (distance + 1); i++) {
			if (i % 5 == 0 && i != 0) {
				printf("+");
			}
			else {
				printf("-");
			}
		}

		printf("\n");
	}
	//End of Stage 2 ------------------


	//Stage 3 ------------------
	printf("\nStage 3\n");
	printf("==========\n");

	

	//End of Stage 3 
}


double dist(double lat1, double long1, double lat2, double long2) {
	double chord_length, angle_distance, distance;
	
	chord_length = (sin(toRadian(lat2 - lat1) / 2) * sin(toRadian(lat2 - lat1) / 2)) +
		cos(toRadian(lat1)) * cos(toRadian(lat2)) * ((sin(toRadian(long2 - long1) / 2.0)) * (sin(toRadian(long2 - long1) / 2.0)));

	angle_distance = 2 * atan2(sqrt(chord_length), sqrt(1 - chord_length));

	distance = 6371 * angle_distance;

	return distance; 
}

double toRadian(double angle) {
	double y;
	y = angle * (PI / 180);
	return y;
 }
